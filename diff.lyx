#LyX 1.6.2 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language spanish
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Utilidades Diff y Patch
\begin_inset Newline newline
\end_inset

Primera entrega
\end_layout

\begin_layout Date
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Date
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introducción
\end_layout

\begin_layout Standard
Este informe contiene la documentación del trabajo práctico especial realizado
 para la cátedra de Análisis y Diseño de Algoritmos I.
\end_layout

\begin_layout Standard
La primera etapa del trabajo consiste en el diseño y la implementación de
 una utilidad denominada 
\emph on
diff
\emph default
, que dados dos archivos (origen y objetivo) devuelva una secuencia de cambios
 que permiten pasar de uno a otro.
\end_layout

\begin_layout Standard
Para el diseño del proyecto se tuvieron en cuenta tanto los tipos de datos
 necesarios, como el algoritmo a implementar.
\end_layout

\begin_layout Standard
En cuanto a los tipos de datos, se consideraron los cuatro principales:
 Línea, Archivo, Cambio y Diferencial y otros auxiliares: Lista, IteradorLista,
 Subsecuencia, ParInt y Arreglo, que fueron necesarios para poder implementar
 el algoritmo.
 Además e realizaron las correspondientes especificaciones en NEREUS de
 los TDAs.
\end_layout

\begin_layout Standard
El algoritmo empleado para buscar una subsecuencia común entre los archivos
 fue seleccionado de acuerdo a los requerimientos del enunciado, por lo
 que no se eligió el óptimo.
 Se realizó una análisis de la complejidad temporal de dicho algoritmo,
 así como también del utilizado para crear la lista de cambios.
\end_layout

\begin_layout Standard
Para la implementación, se utilizó el lenguaje C++ y el entorno de desarrollo
 integrado (IDE) 
\emph on
Code::Blocks
\emph default
.
 Se procedió llevando las especificaciones algebraicas de los TDAs a clases
 de C++ e implementando el mencionado algoritmo.
\end_layout

\begin_layout Section
Tipos de datos abstractos
\end_layout

\begin_layout Subsection
Tipos auxiliares
\end_layout

\begin_layout Standard
Además de los tipos principales necesarios se implementaron tipos auxiliares,
 que permiten lograr una especificación mas genéral en terminos de los TDAs
 ya conocidos.
\end_layout

\begin_layout Standard
El soporte de herencia del lenguaje NEREUS nos permitió definir algunos
 de los los tipos principales a partir de los auxiliares, y a su vez, existen
 relaciones de herencia entre tipos auxiliares.
\end_layout

\begin_layout Subsubsection
Lista
\end_layout

\begin_layout Standard
Es una lista genérica, pero con funcionalidad reducida comparado con la
 especificación estandar de lista.
 Este tipo sólo permite inserciones al final y no es posible eliminar elementos.
\end_layout

\begin_layout LyX-Code
CLASS Lista[Elem]
\end_layout

\begin_layout LyX-Code
IMPORTS Boolean
\end_layout

\begin_layout LyX-Code
BASIC CONSTRUCTORS crear, agregarFinalLista
\end_layout

\begin_layout LyX-Code
DEFERRED
\end_layout

\begin_layout LyX-Code
TYPES Lista
\end_layout

\begin_layout LyX-Code
FUNCTIONS
\end_layout

\begin_deeper
\begin_layout LyX-Code
\begin_inset Formula $crear:\:\rightarrow Lista$
\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset Formula $agregarFinalLista:\: Lista\: x\: Elem\rightarrow Lista$
\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset Formula $vaciaLista:\: Lista\rightarrow Boolean$
\end_inset


\end_layout

\end_deeper
\begin_layout LyX-Code
END-CLASS
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Subsubsection
IteradorLista
\end_layout

\begin_layout Standard
Este tipo tiene el objeto de permitir acceder a los elementos de una lista
 secuencialmente.
\end_layout

\begin_layout LyX-Code
CLASS IteradorLista[Elem]
\end_layout

\begin_layout LyX-Code
IMPORTS Boolean, Lista[Elem]
\end_layout

\begin_layout LyX-Code
BASIC CONSTRUCTORS crear
\end_layout

\begin_layout LyX-Code
DEFERRED
\end_layout

\begin_layout LyX-Code
TYPES IteradorLista
\end_layout

\begin_layout LyX-Code
FUNCTIONS
\end_layout

\begin_deeper
\begin_layout LyX-Code
\begin_inset Formula $crear:\: Lista\rightarrow IteradorLista$
\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset Formula $terminado:\: IteradorLista\rightarrow Boolean$
\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset Formula $sucesor:\: IteradorLista\left(i\right)\rightarrow IteradorLista$
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
\begin_inset Formula $pre:\: not\: terminado\left(i\right)$
\end_inset


\end_layout

\end_deeper
\begin_layout LyX-Code
\begin_inset Formula $elemActual:\: IteradorLista\left(i\right)\rightarrow Elem$
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
\begin_inset Formula $pre:\: not\: terminado\left(i\right)$
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout LyX-Code
END-CLASS
\end_layout

\begin_layout Subsubsection
ParInt
\end_layout

\begin_layout Standard
Es un tipo contenedor de dos numeros enteros.
 Se utiliza para definir el tipo subsecuencia.
\end_layout

\begin_layout LyX-Code
CLASS ParInt
\end_layout

\begin_layout LyX-Code
IMPORTS Int
\end_layout

\begin_layout LyX-Code
BASIC CONSTRUCTORS crear
\end_layout

\begin_layout LyX-Code
DEFERRED
\end_layout

\begin_layout LyX-Code
TYPES ParInt
\end_layout

\begin_layout LyX-Code
FUNCTIONS
\end_layout

\begin_deeper
\begin_layout LyX-Code
\begin_inset Formula $crear:\: Int\: x\: Int\rightarrow ParInt$
\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset Formula $setPrimero:\: Int\: x\: ParInt\rightarrow ParInt$
\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset Formula $getPrimero:\: ParInt\rightarrow Int$
\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset Formula $setSegundo:\: Int\: x\: ParInt\rightarrow ParInt$
\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset Formula $getSegundo:\: ParInt\rightarrow Int$
\end_inset


\end_layout

\end_deeper
\begin_layout LyX-Code
END-CLASS
\end_layout

\begin_layout Subsubsection
Subsecuencia
\end_layout

\begin_layout Standard
Es una lista de pares de números enteros.
 Su función en el sistema es la de contener los índices de las líneas de
 una subsecuencia común entre dos archivos.
\end_layout

\begin_layout LyX-Code
CLASS Subsecuencia
\end_layout

\begin_layout LyX-Code
IMPORTS ParInt
\end_layout

\begin_layout LyX-Code
INHERITS Lista[ParInt]
\end_layout

\begin_layout LyX-Code
DEFERRED
\end_layout

\begin_layout LyX-Code
TYPES Subsecuencia
\end_layout

\begin_layout LyX-Code
END-CLASS
\end_layout

\begin_layout Subsubsection
Arreglo
\end_layout

\begin_layout Standard
Es una colección de elementos de acceso aleatorio y de tamaño fijo.
 Se optó por un indexamiento al estilo pascal, es decir, de 1 a n.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Siendo n el tamaño del arreglo
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Este tipo es base de los TDAs Archivo y Línea.
\end_layout

\begin_layout LyX-Code
CLASS Arreglo[Elem]
\end_layout

\begin_layout LyX-Code
IMPORTS Nat
\end_layout

\begin_layout LyX-Code
BASIC CONSTRUCTORS crear, setCelda
\end_layout

\begin_layout LyX-Code
DEFERRED
\end_layout

\begin_layout LyX-Code
TYPES Arreglo
\end_layout

\begin_layout LyX-Code
FUNCTIONS
\end_layout

\begin_deeper
\begin_layout LyX-Code
\begin_inset Formula $crear:\: Nat\rightarrow Arreglo$
\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset Formula $tamaño:\: Arreglo\rightarrow Nat$
\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset Formula $setCelda:\: Arreglo\left(a\right)\: x\: Nat(i)\rightarrow Arreglo$
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
\begin_inset Formula $pre:\:1\leq i\leq tamaño\left(a\right)$
\end_inset


\end_layout

\end_deeper
\begin_layout LyX-Code
\begin_inset Formula $getCelda:\: Arreglo\left(a\right)\: x\: Nat(i)\rightarrow Elem$
\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
\begin_inset Formula $pre:\:1\leq i\leq tamaño\left(a\right)$
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout LyX-Code
END-CLASS
\end_layout

\begin_layout Subsection
Tipos Principales
\end_layout

\begin_layout Subsubsection
Línea
\end_layout

\begin_layout Standard
Representa una cadena de caracteres.
 Para su definición se utiliza como base el TDA Arreglo parametrizado con
 el tipo básico char.
 También se agregó a la especificación la funcionalidad básica para comparar
 dos líneas.
\end_layout

\begin_layout LyX-Code
CLASS Línea
\end_layout

\begin_layout LyX-Code
IMPORTS Char, Boolean
\end_layout

\begin_layout LyX-Code
INHERITS Arreglo[Char]
\end_layout

\begin_layout LyX-Code
DEFERRED
\end_layout

\begin_layout LyX-Code
TYPES Línea
\end_layout

\begin_layout LyX-Code
FUNCTIONS
\end_layout

\begin_deeper
\begin_layout LyX-Code
\begin_inset Formula $iguales:\: Línea\: x\: Línea\rightarrow Boolean$
\end_inset


\end_layout

\end_deeper
\begin_layout LyX-Code
END-CLASS
\end_layout

\begin_layout Subsubsection
Archivo
\end_layout

\begin_layout Standard
Es la representación de una secuencia de líneas.
 Utiliza el tipo arreglo parametrizado con el tipo Línea como base.
 Su funcionalidad es dar acceso aleatorio a las líneas.
 Para mayor claridad se redefinieron los nombres de las funciones setCelda
 y getCelda del TDA Arreglo.
\end_layout

\begin_layout LyX-Code
CLASS Archivo
\end_layout

\begin_layout LyX-Code
IMPORTS Línea
\end_layout

\begin_layout LyX-Code
INHERITS Arreglo[Línea] [setLínea : setCelda, getLínea : getCelda]
\end_layout

\begin_layout LyX-Code
DEFERRED
\end_layout

\begin_layout LyX-Code
END-CLASS
\end_layout

\begin_layout Subsubsection
Cambio
\end_layout

\begin_layout Standard
Representa un cambio genérico a un archivo, sirve de base para los dos tipos
 de cambio específicos.
 Su funcionalidad es la de producir y aplicar eliminaciones o adiciones
 a un archivo en la porción que le corresponde.
\end_layout

\begin_layout LyX-Code
CLASS Cambio
\end_layout

\begin_layout LyX-Code
IMPORTS Nat, Arreglo[Línea]
\end_layout

\begin_layout LyX-Code
BASIC CONSTRUCTORS Crear
\end_layout

\begin_layout LyX-Code
DEFERRED
\end_layout

\begin_layout LyX-Code
TYPES Cambio
\end_layout

\begin_layout LyX-Code
FUNCTIONS
\end_layout

\begin_deeper
\begin_layout LyX-Code
\begin_inset Formula $Crear:\: Nat\: x\: Nat\: x\: Nat\rightarrow Cambio$
\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset Formula $getDiff:\: Cambio\: x\: Archivo\rightarrow Archivo$
\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset Formula $aplicarPatch:\: Cambio\: x\: Archivo\rightarrow Archivo$
\end_inset


\end_layout

\end_deeper
\begin_layout LyX-Code
END-CLASS
\end_layout

\begin_layout Subsubsection
CambioAgregar
\end_layout

\begin_layout Standard
Es un tipo heredado de cambio que define la operación para agregar un conjunto
 de líneas.
\end_layout

\begin_layout LyX-Code
CLASS CambioAgregar
\end_layout

\begin_layout LyX-Code
INHERITS Cambio
\end_layout

\begin_layout LyX-Code
DEFERRED
\end_layout

\begin_layout LyX-Code
TYPES CambioAgregar
\end_layout

\begin_layout LyX-Code
END-CLASS
\end_layout

\begin_layout Subsubsection
CambioEliminar
\end_layout

\begin_layout Standard
Es el tipo correspondiente a la operación para eliminar un conjunto de líneas.
\end_layout

\begin_layout LyX-Code
CLASS CambioEliminar
\end_layout

\begin_layout LyX-Code
INHERITS Cambio
\end_layout

\begin_layout LyX-Code
DEFERRED
\end_layout

\begin_layout LyX-Code
TYPES CambioEliminar
\end_layout

\begin_layout LyX-Code
END-CLASS
\end_layout

\begin_layout Subsubsection
Diferencial
\end_layout

\begin_layout Standard
Es el tipo más importante del sistema.
 A partir de dos archivos genera una subsecuencia de líneas comunes y a
 partir de ésta calcula una lista con los cambios necesarios para obtener
 un archivo a partir del otro.
 
\end_layout

\begin_layout LyX-Code
CLASS Diferencial
\end_layout

\begin_layout LyX-Code
IMPORTS Subsecuencia, Archivo, Lista[Cambio], CambioAgregar,
\end_layout

\begin_deeper
\begin_layout LyX-Code
    CambioEliminar
\end_layout

\end_deeper
\begin_layout LyX-Code
BASIC CONSTRUCTORS crear
\end_layout

\begin_layout LyX-Code
DEFERRED
\end_layout

\begin_layout LyX-Code
TYPES Diferencial
\end_layout

\begin_layout LyX-Code
FUNCTIONS
\end_layout

\begin_deeper
\begin_layout LyX-Code
\begin_inset Formula $crear:\: Archivo\: x\: Archivo\rightarrow Diferencial$
\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset Formula $calcularSubsecuencia:\: Diferencial\rightarrow Subsecuencia$
\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset Formula $calcularCambios:\: Subsecuencia\: x\: Diferencial\rightarrow Lista[Cambio]$
\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset Formula $getDiff:\: Lista[Cambio]\: x\: Diferencial\rightarrow Archivo$
\end_inset


\end_layout

\end_deeper
\begin_layout LyX-Code
END-CLASS
\end_layout

\begin_layout Section
Implementación de los TDAs
\end_layout

\begin_layout Subsection
Estructura del proyecto
\end_layout

\begin_layout Standard
El proyecto fue desarrollado con el entorno de desarrollo integrado Code::Blocks.
 
\end_layout

\begin_layout Standard
El código está contenido en los siguientes archivos:
\end_layout

\begin_layout Itemize
diffalgo.cbp: archivo principal del proyecto.
\end_layout

\begin_layout Itemize
diff.cpp: programa principal.
\end_layout

\begin_layout Itemize
Diferencial.h: encabezado de la clase Diferencial.
\end_layout

\begin_layout Itemize
Diferencial.cpp: implementación de la clase Diferencial.
\end_layout

\begin_layout Itemize
Cambio.h: encabezado de la clase Cambio y sus derivadas.
\end_layout

\begin_layout Itemize
Cambio.cpp: implementación de la clase Cambio y sus derivadas.
\end_layout

\begin_layout Itemize
Archivo.h: encabezado de la clase Archivo.
\end_layout

\begin_layout Itemize
Archivo.cpp: implementación de la clase Archivo.
\end_layout

\begin_layout Itemize
Lista.h: encabezado e implementación del template Lista e IteradorLista.
\end_layout

\begin_layout Subsection
Tipos Auxiliares
\end_layout

\begin_layout Subsubsection
Lista
\end_layout

\begin_layout Standard
Este tipo se implementó con un template para que pueda ser parametrizado.
\end_layout

\begin_layout Standard
Para que la inserción al final de la lista tenga una complejidad temporal
 
\begin_inset Formula $O\left(1\right)$
\end_inset

, se mantiene un puntero al último nodo.
 La función más importante de Lista es insertarFinal.
\end_layout

\begin_layout LyX-Code
template <class T>
\end_layout

\begin_layout LyX-Code
void insertarFinal(const T & elem); 
\end_layout

\begin_layout Standard
El destructor recorre los nodos de la lista y los elimina uno por uno, su
 complejidad es de 
\begin_inset Formula $O\left(n\right)$
\end_inset

.
\end_layout

\begin_layout Subsubsection
IteradorLista
\end_layout

\begin_layout Standard
Este tipo también se implementó con un template.
 Recibe un puntero a una lista en el constructor.
 Puede acceder a los atributos privados de los objetos de tipo Lista ya
 que ha sido declarado como amigo(friend).
 Sus métodos principales son:
\end_layout

\begin_layout LyX-Code
template <class T>
\end_layout

\begin_layout LyX-Code
void IteradorLista<T>::sucesor()
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout LyX-Code
template <class T>
\end_layout

\begin_layout LyX-Code
bool IteradorLista<T>::terminado()
\end_layout

\begin_layout LyX-Code
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout LyX-Code
template <class T>
\end_layout

\begin_layout LyX-Code
T IteradorLista<T>::elemActual()
\end_layout

\begin_layout Standard
La complejidad de estas tres funciones es 
\begin_inset Formula $O\left(1\right)$
\end_inset

.
\end_layout

\begin_layout Subsubsection
ParInt
\end_layout

\begin_layout Standard
Es una clase contenedora con sus atributos públicos (primero y segundo).
 En el constructor se pasan los dos valores iniciales del par.
\end_layout

\begin_layout LyX-Code
class parInt
\end_layout

\begin_layout LyX-Code
{
\end_layout

\begin_deeper
\begin_layout LyX-Code
public: 
\end_layout

\begin_layout LyX-Code
        int primero; 
\end_layout

\begin_layout LyX-Code
        int segundo;         
\end_layout

\begin_layout LyX-Code
        parInt(int p, int s) : primero(p), segundo(s) { }
\end_layout

\end_deeper
\begin_layout LyX-Code
};
\end_layout

\begin_layout Subsubsection
Subsecuencia
\end_layout

\begin_layout Standard
Se implementa simplemente parametrizando el template Lista con parInt.
\end_layout

\begin_layout LyX-Code
Lista<parInt> Subsecuencia;
\end_layout

\begin_layout Subsubsection
Arreglo
\end_layout

\begin_layout Standard
Se utilizan los arreglos estándares de C/C++.
\end_layout

\begin_layout Subsection
Tipos Indispensables
\end_layout

\begin_layout Subsubsection
Línea
\end_layout

\begin_layout Standard
Se utiliza el tipo string de la STL, que permite hacer comparaciones y provee
 acceso aleatorio a sus caracteres.
\end_layout

\begin_layout Subsubsection
Archivo
\end_layout

\begin_layout Standard
En la implementación de este TDA se representaron las líneas mediante la
 composición de un arreglo de strings
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Si bien podríamos haber creado una clase arreglo de la que pueda heredarse,
 preferimos hacerlo por composición, para conseguir más control sobre el
 arreglo en caso de situaciones problemáticas, como la no existencia de
 un archivo o los errores de lectura.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Para crear un Archivo se le pasa el nombre del archivo físico al constructor.
 La clase Archivo setea una variable booleana (errorAbrir) que permite al
 cliente, invocando al método isOpen, verificar que el archivo haya sido
 abierto correctamente.
 Para calcular el número de líneas de un archivo se implementó el método
 estático nroLineas que recibe un objeto de tipo ifstream y retorna un entero,
 con esta información se crea dinámicamente el arreglo de líneas (string
 * lineas) y se lo carga con el contenido del archivo.
\end_layout

\begin_layout LyX-Code
Archivo::Archivo(const char nombre[])
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout LyX-Code
bool Archivo::isOpen() const
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout LyX-Code
string Archivo::getLinea(int n) const
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout LyX-Code
void Archivo::setLinea(int n, const string & linea)
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout LyX-Code
int Archivo::nroLineas(ifstream & arch)
\begin_inset VSpace defskip
\end_inset

int Archivo::getCantLineas() const 
\end_layout

\begin_layout Standard
La complejidad de isOpen, getLinea, setLinea, getCantLineas es de 
\begin_inset Formula $O\left(1\right)$
\end_inset

.
 La complejidad para calcular el número de líneas y cargarlas es de 
\begin_inset Formula $O\left(n\right)$
\end_inset

.
\end_layout

\begin_layout Subsubsection
Cambio
\end_layout

\begin_layout Standard
Para favorecer el polimorfismo se implementó una clase abstracta, que representa
 a un cambio genérico.
 La funcionalidad para aplicar un patch no se implementó en esta entrega
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Simplemente se declaró un método que no recibe y no retorna parámetros,
 que será declarado e implementado correctamente en la segunda entrega
\end_layout

\end_inset

.
 Los archivos se pasan al método getDiff para que este pueda extraer las
 lineas que necesite para crear la porción del diff.
\end_layout

\begin_layout LyX-Code
class Cambio
\end_layout

\begin_layout LyX-Code
{
\end_layout

\begin_layout LyX-Code
    public:
\end_layout

\begin_layout LyX-Code
        virtual string getDiff(const Archivo &, const Archivo &) = 0;
\end_layout

\begin_layout LyX-Code
        virtual void aplicarPatch() = 0; 
\end_layout

\begin_layout LyX-Code
};
\end_layout

\begin_layout Subsubsection
CambioAgregar
\end_layout

\begin_layout Standard
Este TDA se implementó como una clase derivada de la clase Cambio.
 Contiene tres atributos privados que representan la línea del archivo origen
 a partir de la cual se agrega y las líneas de comienzo y fin del archivo
 destino (pasados en el constructor).
\end_layout

\begin_layout Subsubsection
CambioEliminar
\end_layout

\begin_layout Standard
Esta clase es la simétrica a CambioAgregar para eliminación.
 Contiene tres atributos privados que representan las líneas de comienzo
 y fin del archivo origen y la línea del archivo destino (pasados en el
 constructor).
\end_layout

\begin_layout Subsubsection
Diferencial
\end_layout

\begin_layout Standard
Un objeto Diferencial se construye pasando dos objetos de tipo Archivo (origen
 y objetivo), este setea sus atributos privados subsecuencia y cambios invocando
 a los métodos privados calcularSubsecuencia y calcularCambios.
 Una vez creado el objeto el cliente puede invocar al método público imprimirDif
f que saca por consola el resultado del diff.
\end_layout

\begin_layout LyX-Code
Diferencial::Diferencial(Archivo & archorig, Archivo & archobj)
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout LyX-Code
void Diferencial::calcularSubsecuencia()
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout LyX-Code
void Diferencial::calcularCambios()
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout LyX-Code
void Diferencial::imprimirDiff()
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
La complejidad del método imprimirDiff es de 
\begin_inset Formula $O\left(n\right)$
\end_inset

, siendo 
\begin_inset Formula $n$
\end_inset

 la cantidad de cambios.
 Los métodos calcularSubsecuencia y calcularCambios se estudiarán en la
 próxima sección.
\end_layout

\begin_layout Section
Algoritmos utilizados y su complejidad
\end_layout

\begin_layout Subsection
Algoritmo para calcular una subsecuencia común
\end_layout

\begin_layout Standard
En esta primera entrega se implementó un algoritmo simple para calcular
 subsecuencias comúnes de líneas entre dos archivos.
 Está implementado en el método calcularSubsecuencia de la clase Diferencial.
\end_layout

\begin_layout Standard
Básicamente, el algoritmo consiste en iterar sobre las líneas del archivo
 origen y por cada una de estas iterar en el archivo objetivo hasta encontrar
 una línea igual.
 Si se encuentra la línea correspondiente, las próximas iteraciones en el
 archivo objetivo comenzaran desde allí.
 Cuando se encuentran las líneas iguales, el par de índices que las identifica
 se inserta en la subsecuencia.
 El algoritmo termina cuando se itero sobre todas las líneas del archivo
 origen ó cuando el indice que indica desde donde se comienza en el archivo
 objetivo en la iteración es mayor que la cantidad de líneas de este
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Este condición se da cuando la ultima línea del archivo destino está en
 la subsecuencia 
\end_layout

\end_inset

.
 
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
Su pseudocódigo es el siguiente:
\end_layout

\begin_layout LyX-Code

\size footnotesize
k = 1 //indice que marca por donde se comienza en el archivo objetivo
\end_layout

\begin_layout LyX-Code

\size footnotesize
j = 1
\end_layout

\begin_layout LyX-Code

\size footnotesize
for (i = 1; i <= longitud(ArchOri) AND k <= longitud(ArchObj); i++)
\end_layout

\begin_deeper
\begin_layout LyX-Code

\size footnotesize
j = k
\end_layout

\begin_layout LyX-Code

\size footnotesize
while (j <= longitud(ArchObj) AND ArchOri[i] != ArchObj[j])
\end_layout

\begin_deeper
\begin_layout LyX-Code

\size footnotesize
j++
\end_layout

\end_deeper
\begin_layout LyX-Code

\size footnotesize
if (j <= longitud(ArchObj)) //se encontraron lineas iguales
\end_layout

\begin_deeper
\begin_layout LyX-Code

\size footnotesize
subsecuencia.insertar(i,j)
\end_layout

\begin_layout LyX-Code

\size footnotesize
k = j + 1 //se sigue después de esta linea en la proxima iteración
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
La complejidad temporal del algoritmo claramente depende de la longitud
 del archivo origen y objetivo, a las cuales llamaremos m y n respectivamente.
\end_layout

\begin_layout Standard
El peor de los casos se da cuando los archivos no tienen líneas en común,
 ya que en esta situación, por cada línea del archivo origen se itera por
 todas las del objetivo (el índice k permanece constante).
\end_layout

\begin_layout Standard
Entonces, sea 
\begin_inset Formula $T\left(m,n\right)$
\end_inset

 el tiempo que tarda el algoritmo:
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{multline*}
T\left(m,n\right)\leq\sum_{k=1}^{m}\left[C_{0}+\sum_{j=1}^{n}C_{1}\right]+C_{2}\leq m.C_{0}+\sum_{i=1}^{m}\left[\sum_{j=1}^{n}C_{1}\right]+C_{2}\\
\leq m.C_{0}+\sum_{i=1}^{m}n.C_{1}+C_{2}\leq m.C_{0}+m.n.C_{1}+C_{2}\epsilon\: O\left(m.n\right)\end{multline*}

\end_inset


\end_layout

\begin_layout Standard
Por lo tanto, la complejidad del algoritmo para calcular una subsecuencia
 común es de 
\begin_inset Formula $O\left(m.n\right)$
\end_inset

.
 
\end_layout

\begin_layout Standard
El mejor de los casos se da cuando los archivos son iguales ya que el bucle
 while interno no hace ninguna iteración, en consecuencia, tiene complejidad
 de 
\begin_inset Formula $\Omega\left(m\right)$
\end_inset

 siendo m la longitud de ambos archivos.
\end_layout

\begin_layout Subsection
Algoritmo para crear la lista de cambios
\end_layout

\begin_layout Standard
A partir de una subsecuencia común de líneas, se debe generar la lista de
 cambios que permita transformar un archivo a otro por medio de ediciones
 (adiciones y eliminaciones de líneas).
 Este algoritmo está implementado en el método calcularCambios de la clase
 Diferencial.
\end_layout

\begin_layout Standard
El algoritmo itera sobre la subsecuencia y encuentra los saltos que se producen
 en los indices de cada par con respecto a los indices del par anterior.
 Cuando se registra un salto en uno o ambos elementos del par actual, significa
 que debe crearse un cambio; CambioEliminar cuando el salto se produce en
 el índice del archivo origen y CambioAgregar cuando el salto es en el indice
 del archivo objetivo.
 Esta iteración puede implementarse con un bucle, pero es necesario considerar
 fuera de éste las ediciones al principio y al final.
\end_layout

\end_body
\end_document
